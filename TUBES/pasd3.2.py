# -*- coding: utf-8 -*-
"""Pasd3

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oTJa3uvGuWdgeOvlP-u_IQ4uTozBLftp
"""

import streamlit as st
import pandas as pd
import numpy as np
import pickle
from catboost import CatBoostRegressor

import pickle
import numpy as np
import pandas as pd
import streamlit as st

# Load model
with open("catboost_model_quikr.pkl", "rb") as f:
    model = pickle.load(f)

# Daftar nama mobil lengkap dari training (name kolom, bukan gabungan)
car_names = [
    'Audi A6', 'BMW 5 Series', 'Chevrolet Beat', 'Datsun GO', 'Fiat Punto',
    'Force Gurkha', 'Ford Ecosport', 'Hindustan Ambassador', 'Honda City', 'Hyundai i20',
    'Jeep Compass', 'Mahindra XUV500', 'Maruti Swift', 'Mercedes C-Class', 'Mitsubishi Pajero',
    'Nissan Micra', 'Renault Kwid', 'Skoda Rapid', 'Tata Nano', 'Toyota Fortuner',
    'Volkswagen Polo', 'Daihatsu Ayla', 'Wuling Confero', 'Mazda CX-5', 'Chery QQ'
]
fuel_types = ['Petrol', 'Diesel', 'Hybrid']

# Layout Streamlit
st.set_page_config(page_title="Prediksi Harga Mobil Bekas", layout="centered")
st.title("ðŸš— Prediksi Harga Mobil Bekas")

# Input pengguna
name = st.selectbox("Pilih Nama Mobil", sorted(car_names))
company = st.text_input("Nama Perusahaan / Merek", value=name.split()[0])
fuel_type = st.selectbox("Jenis Bahan Bakar", fuel_types)
age = st.slider("Umur Mobil (tahun)", 0, 30, 5)
kms_driven = st.number_input("Jarak Tempuh (dalam KM)", min_value=0, step=1000)

# Estimasi harga dasar
base_prices = {
    'Audi A6': 650_000_000,
    'BMW 5 Series': 700_000_000,
    'Mercedes C-Class': 750_000_000,
    'Toyota Fortuner': 350_000_000,
    'Honda City': 300_000_000,
    'Hyundai i20': 250_000_000,
    'Maruti Swift': 120_000_000,
    'Tata Nano': 110_000_000,
    'Daihatsu Ayla': 130_000_000,
    'Wuling Confero': 150_000_000
}
estimated_price = base_prices.get(name, 200_000_000)
segment = pd.cut([estimated_price],
                 bins=[0, 80e6, 150e6, 300e6, 500e6, 1e9, 3e9],
                 labels=['ultra_low', 'low', 'mid_low', 'mid_high', 'high', 'lux']
                 )[0]

# Fitur turunan
company_model = f"{company}_{name}"
fuel_age = f"{fuel_type}_{age}"
company_segment = f"{company_model}_{segment}"
log_km = np.log1p(kms_driven)
log_km_per_year = np.log1p(kms_driven / max(age, 1))

# Kategori berdasarkan name
lux_names = ['BMW 5 Series', 'Mercedes C-Class', 'Audi A6', 'Land Rover Evoque']
mid_names = ['Toyota Fortuner', 'Honda City', 'Hyundai i20', 'Volkswagen Polo', 'Mazda CX-5']
budget_names = ['Daihatsu Ayla', 'Maruti Swift', 'Wuling Confero', 'Tata Nano', 'Chery QQ', 'DFSK Glory']

if name in lux_names:
    brand_category = 'luxury'
elif name in mid_names:
    brand_category = 'midrange'
elif name in budget_names:
    brand_category = 'budget'
else:
    brand_category = 'general'

# Flags
is_premium = int(brand_category == 'luxury' and age <= 3)
is_high_value = int(brand_category in ['luxury', 'midrange'] and age <= 5 and kms_driven <= 60000)
is_low_budget = int(brand_category == 'budget' and age >= 10 and kms_driven >= 120000)

# DataFrame input
features = pd.DataFrame([{
    'company_model': company_model,
    'fuel_type': fuel_type,
    'log_km': log_km,
    'age': age,
    'segment': segment,
    'fuel_age': fuel_age,
    'company_segment': company_segment,
    'log_km_per_year': log_km_per_year,
    'brand_category': brand_category,
    'is_premium': is_premium,
    'is_high_value': is_high_value,
    'is_low_budget': is_low_budget
}])

# Prediksi
if st.button("Prediksi Harga"):
    pred_log = model.predict(features)[0]
    pred_rp = np.expm1(pred_log)
    st.subheader(f"ðŸ’° Estimasi Harga: Rp {pred_rp:,.0f}")